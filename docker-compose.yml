version: '3'
networks:
  private:
    name: private
    external: true
  web:
    name: web
    external: true

services:
  traefik:
    container_name: traefik
    restart: always
    image: traefik:v2.9
    ports:
      - 443:443
      - 80:80
    command:
      - --api=true
      - --api.dashboard=true
      - "--log.level=INFO"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.watch=true"
      - "--providers.docker.network=web"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.dockersecure.address=:5002"
      - "--entrypoints.dockersecure.address=:5000"

      #### https ####
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.lets-encr.acme.httpchallenge=true
      - --certificatesresolvers.lets-encr.acme.email=takhtoukh76@gmail.com
      - --certificatesresolvers.lets-encr.acme.storage=acme.json
      - --certificatesresolvers.lets-encr.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.lets-encr.acme.httpchallenge=true
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.1,0.3,1.2,5.0
    labels:
      - traefik.enable=true
       ## HTTPS CHALLENGE
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - traefik.http.routers.traefik.rule=Host(`traefik.the-tip-top.site`)
      - traefik.http.services.traefik.loadbalancer.server.port=8080
      - "traefik.http.routers.traefik.tls.certresolver=lets-encr"
       ## HTTP REDIRECT
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.redirect-https.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.redirect-https.entrypoints=web"
      - "traefik.http.routers.redirect-https.middlewares=redirect-to-https"
      - "traefik.http.middlewares.corsheaders.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.corsheaders.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.corsheaders.headers.accessControlAllowHeaders=*"
      - "traefik.http.middlewares.corsheaders.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.corsheaders.headers.addvaryheader=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./acme.json:/acme.json
    networks:
      - web
      - private
#---------------------
# vault
#---------------------

  vault:
    image: hashicorp/vault:latest
    container_name: vault
    restart: always
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: root  # üî• √Ä remplacer en production
      VAULT_ADDR: "http://0.0.0.0:8200"
      VAULT_API_ADDR: "http://0.0.0.0:8200"
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    volumes:
      - ./data/vault:/vault/data
      - ./data/vault/config/vault-config.json:/vault/config/vault-config.json
      - ./data/vault/entrypoint.sh:/vault/entrypoint.sh
    entrypoint: ["/vault/entrypoint.sh"]
    networks:
      - web
    command: ["vault", "server", "-config=/vault/config/vault-config.json"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.vault.entrypoints=websecure"
      - "traefik.http.routers.vault.rule=Host(`vault.the-tip-top.site`)"
      - "traefik.http.routers.vault.tls.certresolver=lets-encr"
      - "traefik.http.services.vault.loadbalancer.server.port=8200"
      - "traefik.http.routers.vault.service=vault"

#---------------------
# gogs-db
#---------------------      
  gogs-db:
    image: postgres:13-alpine
    container_name: gogs-db
    volumes:
      - ./data/gogs/postgres:/var/lib/postgresql/data
    networks:
      - private
    environment:
      - POSTGRES_DB=gogs
      - POSTGRES_USER=gogs
      - POSTGRES_PASSWORD=gogs
    restart: always

#---------------------
# gogs
#---------------------  
  gogs:
    image: gogs/gogs:latest
    restart: always
    container_name: gogs
    ports:
      - 2222:2222
    networks:
      - private
      - web
    volumes:
      - ./data/gogs/data:/data
    depends_on:
      - gogs-db
    labels:
      - traefik.enable=true
      - "traefik.http.routers.gogs.entrypoints=websecure"
      - traefik.http.routers.gogs.rule=Host(`gogs.the-tip-top.site`)
      - traefik.http.services.gogs.loadbalancer.server.port=3000
      - "traefik.http.routers.gogs.tls.certresolver=lets-encr"


#---------------------
# jenkins 
#---------------------
  jenkins:
    build:
      context: .
      dockerfile: jenkins.Dockerfile
    container_name: jenkins
    volumes:
      - ./data/jenkins/jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - $PWD:/app
    user: 0:0
    networks:
      - private
      - web
    labels:
      - traefik.enable=true
      - "traefik.http.routers.jenkins.entrypoints=websecure"
      - traefik.http.routers.jenkins.rule=Host(`jenkins.the-tip-top.site`)
      - traefik.http.services.jenkins.loadbalancer.server.port=8080
      - "traefik.http.routers.jenkins.tls.certresolver=lets-encr"
    environment:
      - "JAVA_OPTS=-Xms512m -Xmx2048m"
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1"
#---------------------
# nexus 
#---------------------
  nexus:
    image: sonatype/nexus3:latest
    container_name: nexus
    hostname: nexus.the-tip-top.site
    networks:
     - web
     - private
    ports:
     - "8081:8081"  # Interface Web
     - "5000:5000"  # Docker Registry
     - "5002:5002"
    volumes:
     - /home/debian/data/nexus-data/keystores/jetty-https.xml:/opt/sonatype/nexus/etc/jetty/jetty-https.xml
     - ./data/nexus-data:/nexus-data
    user: "0:0"  # Utiliser l'utilisateur root
    environment:
     - NEXUS_CONTEXT=/
     - REGISTRY_HTTP_RELATIVEURLS=true
     - INSTALL4J_ADD_VM_PARAMS=-Xms512m -Xmx2g
    labels:
        # Interface Nexus Web
     - traefik.enable=true
     - "traefik.http.routers.nexus.entrypoints=websecure"
     - "traefik.http.routers.nexus.rule=Host(`nexus.the-tip-top.site`)"
     - "traefik.http.routers.nexus.tls.certresolver=lets-encr"
     - "traefik.http.services.nexus.loadbalancer.server.port=8081"
     # Docker Registry
     - "traefik.tcp.routers.registry.rule=HostSNI(`registry.the-tip-top.site`)"
     - "traefik.tcp.routers.registry.entrypoints=dockersecure"
     - "traefik.tcp.routers.registry.tls.passthrough=true"
     - "traefik.tcp.routers.registry.tls.certresolver=lets-encr"
     - "traefik.tcp.services.registry.loadbalancer.server.port=5000"
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1"


  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./data/prometheus:/prometheus  # Montage du r√©pertoire pour les donn√©es et la config
      - ./data/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml  # Montage du fichier de config sp√©cifique
      - ./data/alertmanager/alerts.rules.yml:/etc/prometheus/alerts.rules.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
     - 9090
    user: 0:0
    networks:
      - private
      - web
    labels:
      - traefik.enable=true
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - traefik.http.routers.prometheus.rule=Host(`prometheus.the-tip-top.site`)
      - "traefik.http.routers.prometheus.tls.certresolver=lets-encr"
  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
     - 3000
    user: 0:0
    networks:
      - private
      - web
    volumes:
      - ./data/grafana/:/var/lib/grafana
      - ./data/grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - prometheus
    labels:
      - traefik.enable=true
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - traefik.http.routers.grafana.rule=Host(`grafana.the-tip-top.site`)
      - "traefik.http.routers.grafana.tls.certresolver=lets-encr"
#---------------------
# server monitoring with prometheus
#---------------------      
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    networks:
      - private
      - web
    expose:
      - 9100  # Expose le port interne du conteneur

#---------------------
#  docker monitoring with prometheus
#---------------------         
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    privileged: true  # Ajoute cette ligne pour permettre un acc√®s complet
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: always
    labels:
      - traefik.enable=true
      - "traefik.http.routers.cadvisor.entrypoints=websecure"
      - traefik.http.routers.cadvisor.rule=Host(`cadvisor.the-tip-top.site`)
      - "traefik.http.routers.cadvisor.tls.certresolver=lets-encr"
    networks:
      - web
      - private
    expose:
      - 8080
#---------------------
# sonarQube
#---------------------
  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube
    depends_on:
      - sonarqube-db
    ports:
      - "9000:9000"
    networks:
      - private
      - web
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube-db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONARQUBE_JAVA_OPTS: -Xms512m -Xmx2g
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
      - sonarqube_temp:/opt/sonarqube/temp
    labels:
      - traefik.enable=true
      - "traefik.http.routers.sonarqube.entrypoints=websecure"
      - traefik.http.routers.sonarqube.rule=Host(`sonarqube.the-tip-top.site`)
      - "traefik.http.routers.sonarqube.tls.certresolver=lets-encr"
    deploy:
      resources:
        limits:
          memory: 2g
          cpus: "1"

#---------------------
# Alertmanager
#---------------------

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    networks:
      - private
      - web
    environment:
      - ALERTMANAGER_CONFIG=/etc/alertmanager/config.yml
    volumes:
      - ./data/alertmanager/config.yml:/etc/alertmanager/config.yml
      - ./data/alertmanager/data:/alertmanager
    labels:
      - traefik.enable=true
      - "traefik.http.routers.alertmanager.entrypoints=websecure"
      - "traefik.http.routers.alertmanager.rule=Host(`alertmanager.the-tip-top.site`)"
      - "traefik.http.routers.alertmanager.tls.certresolver=lets-encr"

  sonarqube-db:
    container_name: sonarqube-db
    image: postgres
    networks:
      - private
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar

    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_temp:
  postgresql:
  postgresql_data:
